[{"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/index.tsx":"1","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/reportWebVitals.ts":"2","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/App.tsx":"3","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/redux/rootReducer.tsx":"4","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/redux/actionCreators.tsx":"5","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/helpers.tsx":"6","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/redux/actionTypes.tsx":"7","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/NavBar/index.tsx":"8","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/Routes/index.tsx":"9","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/config.tsx":"10","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/SearchBar/index.tsx":"11","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/Register/index.tsx":"12","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/Homepage/index.tsx":"13","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/ComposePage/index.tsx":"14","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/UserProfile/index.tsx":"15","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/Login/index.tsx":"16","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/SearchResults/index.tsx":"17","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/PostDetails/index.tsx":"18","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/EditFormModal/index.tsx":"19","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/DeleteModal/index.tsx":"20","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/FavoriteButton/index.tsx":"21","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/UserList/index.tsx":"22","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/CommentList/index.tsx":"23","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/UserProfilePhoto/index.tsx":"24","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/BlogList/index.tsx":"25","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/UploadPhotoModal/index.tsx":"26","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/FavoritesList/index.tsx":"27","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/Forms/SignUpForm/index.tsx":"28","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/Forms/LoginForm/index.tsx":"29","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/Forms/BlogForm/index.tsx":"30","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/SortSelection/index.tsx":"31","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/UserCard/index.tsx":"32","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/Forms/CommentForm/index.tsx":"33","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/CommentCard/index.tsx":"34","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/BlogCard/index.tsx":"35","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/CommentReplyAccord/index.tsx":"36"},{"size":1434,"mtime":1615819155659,"results":"37","hashOfConfig":"38"},{"size":425,"mtime":1615819155661,"results":"39","hashOfConfig":"38"},{"size":1263,"mtime":1615819155645,"results":"40","hashOfConfig":"38"},{"size":3469,"mtime":1615819155661,"results":"41","hashOfConfig":"38"},{"size":6744,"mtime":1615819155660,"results":"42","hashOfConfig":"38"},{"size":1691,"mtime":1615819155659,"results":"43","hashOfConfig":"38"},{"size":683,"mtime":1615819155660,"results":"44","hashOfConfig":"38"},{"size":2396,"mtime":1615819155651,"results":"45","hashOfConfig":"38"},{"size":1407,"mtime":1615819155655,"results":"46","hashOfConfig":"38"},{"size":169,"mtime":1615819155659,"results":"47","hashOfConfig":"38"},{"size":1528,"mtime":1615819155656,"results":"48","hashOfConfig":"38"},{"size":2787,"mtime":1615819155653,"results":"49","hashOfConfig":"38"},{"size":2126,"mtime":1615819155652,"results":"50","hashOfConfig":"38"},{"size":1036,"mtime":1615819155652,"results":"51","hashOfConfig":"38"},{"size":3968,"mtime":1615819155654,"results":"52","hashOfConfig":"38"},{"size":2236,"mtime":1615819155652,"results":"53","hashOfConfig":"38"},{"size":1956,"mtime":1615819155653,"results":"54","hashOfConfig":"38"},{"size":8046,"mtime":1615819155653,"results":"55","hashOfConfig":"38"},{"size":979,"mtime":1615819155649,"results":"56","hashOfConfig":"38"},{"size":907,"mtime":1615819155648,"results":"57","hashOfConfig":"38"},{"size":3327,"mtime":1615819155649,"results":"58","hashOfConfig":"38"},{"size":791,"mtime":1615819155658,"results":"59","hashOfConfig":"38"},{"size":1398,"mtime":1615819155647,"results":"60","hashOfConfig":"38"},{"size":640,"mtime":1615819155658,"results":"61","hashOfConfig":"38"},{"size":786,"mtime":1615819155646,"results":"62","hashOfConfig":"38"},{"size":1970,"mtime":1615819155656,"results":"63","hashOfConfig":"38"},{"size":794,"mtime":1615819155649,"results":"64","hashOfConfig":"38"},{"size":3805,"mtime":1615819155651,"results":"65","hashOfConfig":"38"},{"size":1440,"mtime":1615819155650,"results":"66","hashOfConfig":"38"},{"size":2041,"mtime":1615819155650,"results":"67","hashOfConfig":"38"},{"size":2514,"mtime":1615819155656,"results":"68","hashOfConfig":"38"},{"size":864,"mtime":1615819155657,"results":"69","hashOfConfig":"38"},{"size":1325,"mtime":1615819155650,"results":"70","hashOfConfig":"38"},{"size":3244,"mtime":1615819155646,"results":"71","hashOfConfig":"38"},{"size":2092,"mtime":1615819155645,"results":"72","hashOfConfig":"38"},{"size":1717,"mtime":1615819155647,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1reyr7f",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/reportWebVitals.ts",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/App.tsx",["154"],"import React, { useEffect } from 'react';\nimport './App.css';\nimport './animations.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './Routes';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserFavoritesFromAPI, getUserInfoFromAPI } from './redux/actionCreators';\nimport NavBar from './NavBar';\nimport { CustomReduxState } from './custom';\nimport { getCookie } from './helpers';\n\nfunction App() {\n  const userId = useSelector((st: CustomReduxState) => st.user.id);\n  const serverErr = useSelector((st: CustomReduxState) => st.serverErr);\n  const dispatch = useDispatch();\n\n  useEffect(function handleGetUser() {\n    const token = getCookie(\"token\");\n    // if the user has not signed out from previous session and\n    // still has a token, retrieve the user's information by\n    // id upon App mount.\n    if (token && !userId) {\n      dispatch(getUserInfoFromAPI());\n      dispatch(getUserFavoritesFromAPI(userId));\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        {serverErr && <div className=\"App-server-error\">{serverErr}</div>}\n        <NavBar />\n        <Routes />\n      </BrowserRouter>\n    </div >\n  );\n}\n\nexport default App;\n","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/redux/rootReducer.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/redux/actionCreators.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/helpers.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/redux/actionTypes.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/NavBar/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/Routes/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/config.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/SearchBar/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/Register/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/Homepage/index.tsx",["155"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport BlogList from \"../../BlogList\";\nimport { CustomReduxState, Post } from \"../../custom\";\nimport { getPostsFromAPI } from \"../../redux/actionCreators\";\nimport SortSelection from \"../../SortSelection\";\n\n/**\n * `Homepage` renders `BlogList` and `SortSelection` components.\n * If posts do not exist in current redux store, it dispatches an action to\n * `getPostsFromAPI`.\n */\nfunction Homepage() {\n  const postsList = useSelector((st: CustomReduxState) => st.posts.sort((a: Post, b: Post) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime()));\n  const dispatch = useDispatch();\n  const [posts, setPosts] = useState<Array<Post>>([]);\n  const [sortType, setSortType] = useState(\"mostRecent\")\n\n  useEffect(function handleLoadPosts() {\n    if (postsList.length === 0) {\n      dispatch(getPostsFromAPI());\n    } else {\n      setPosts(postsList);\n    }\n    /*POST-SUBMIT BUG FIXED: Changing the favorites count on a post will reset the order to \"most recent\" \n        WHY: because the dependency array had postsList, which causes `setPosts(postsList)` to run, resetting the order\n              to \"most recent\". \n        FIX: Pass the current sort `sortType` to the sortSelection, which will re-sort when posts changes. */\n  }, []);\n\n  // invoked in `SortSelection` component when a user chooses a sort type in the dropdown.\n  const handlePostSort = (sortedPosts: Array<Post>, newSortType: string) => {\n    setPosts(sortedPosts);\n    setSortType(newSortType);\n  }\n\n  return (\n    <div className=\"Homepage\">\n      <Container>\n        <Row className=\"mt-4\">\n          <Col md={12} className=\"d-flex align-items-center justify-content-between\">\n            <h1 className=\"text-left\">Bloggies newsfeed</h1>\n            <SortSelection handlePostSort={handlePostSort} posts={postsList} currentSort={sortType}/>\n          </Col>\n        </Row>\n        <BlogList key={sortType} posts={posts}/>\n      </Container>\n    </div>\n  );\n};\n\nexport default Homepage;","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/ComposePage/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/UserProfile/index.tsx",["156"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col, Alert } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router\";\nimport BlogList from \"../../BlogList\";\nimport { BASE_URL } from \"../../config\";\nimport { CustomReduxState, Post } from \"../../custom\";\nimport FavoritesList from \"../../FavoritesList\";\nimport { removeStrDashes } from \"../../helpers\";\nimport UploadPhotoModal from \"../../UploadPhotoModal\";\nimport UserProfilePhoto from \"../../UserProfilePhoto\";\nimport \"./UserProfile.css\";\n\n/**\n * `UserProfile` renders the page for displaying a user's `FavoritesList` and \n * Publications (`BlogList`).\n */\nfunction UserProfile() {\n  const currUser = useSelector((st: CustomReduxState) => st.user);\n  const { userId, displayName } = useParams<{ userId: string, displayName: string }>();\n  const [isCurrUserProfile, setIsCurrUserProfile] = useState<boolean>(false);\n  const currUserFavs = useSelector((st: CustomReduxState) => st.favorites);\n  const [userFavs, setUserFavs] = useState<Array<Post>>([]);\n  const [userPosts, setUserPosts] = useState<Array<Post>>([]);\n  const [serverErr, setServerErr] = useState(\"\");\n  const [profilePhotoUrl, setProfilePhotoUrl ] = useState(\"\");\n  const [showUploadModal, setShowUploadModal] = useState(false);\n\n  useEffect(function checkProfileOwner() {\n    // retrieve user favorites by a GET request with user id from params.\n    async function getUserFavorites() {\n      try {\n        const favRes = await fetch(`${BASE_URL}/favorites/${userId}`);\n        const favData = await favRes.json();\n        setUserFavs(favData.posts);\n      } catch (err) {\n        setServerErr(\"This user does not exist.\");\n      }\n    }\n\n    // retrieve user publications by a GET request with user id from params.\n    async function getUserPosts() {\n      try {\n        const userPostsRes = await fetch(`${BASE_URL}/posts/user/${userId}`);\n        const userPostsData = await userPostsRes.json();\n        setUserPosts(userPostsData.posts);\n      } catch (err) {\n        setServerErr(\"This user does not exist.\");\n      }\n    }\n\n    async function getUserProfilePhoto() {\n      try {\n        const userPhotoRes = await fetch(`${BASE_URL}/users/${userId}/photo`);\n        const userPhotoResData = await userPhotoRes.json();\n        setProfilePhotoUrl(userPhotoResData.photo_url);\n      } catch (err) {\n        setServerErr(\"This user does not exist.\");\n      }\n    }\n\n    // if profile belongs to the current user, use redux data.\n    if (parseInt(userId) === currUser.id) {\n      setIsCurrUserProfile(true);\n      getUserPosts();\n      setProfilePhotoUrl(currUser.photo_url);\n    } else {\n      // if not current user's profile, fetch the data from backend.\n      getUserFavorites();\n      getUserPosts();\n      getUserProfilePhoto();\n    }\n  }, [userId]);\n\n  const handlePhotoUploadModal = () => {\n    setShowUploadModal(true);\n    console.log(\"opening the photo upload modal\");\n  }\n\n  return (\n    <Container className=\"UserProfile\">\n      {isCurrUserProfile && <UploadPhotoModal show={showUploadModal} handleClose={() => setShowUploadModal(false)} />}\n      <div className=\"UserProfile-photo\">\n      <UserProfilePhoto username={removeStrDashes(displayName)} photoUrl={isCurrUserProfile? currUser.photo_url : profilePhotoUrl} handlePhotoClick={handlePhotoUploadModal} width=\"8rem\" />\n      </div>\n      <h1 className=\"mt-4\">{removeStrDashes(displayName)}'s profile</h1>\n      { serverErr && <Alert>{serverErr}</Alert>}\n      <Row>\n        <Col md={6}>\n          <Container>\n            <Row>\n              <h3 className=\"mt-4\">Publications</h3>\n            </Row>\n            <Row>\n              <BlogList posts={userPosts} />\n            </Row>\n          </Container>\n        </Col>\n        <Col md={6}>\n          <FavoritesList favorites={isCurrUserProfile ? currUserFavs : userFavs} />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default UserProfile;","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/Login/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/SearchResults/index.tsx",["157"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport BlogList from \"../../BlogList\";\nimport { CustomReduxState } from \"../../custom\";\nimport { getSearchResultsFromAPI } from \"../../redux/actionCreators\";\nimport UserList from \"../../UserList\";\n\n/**\n * `SearchResults` renders the page for the search results from a searched term.\n * Displays the `BlogList` and `UserList` and passes the postsResults and userResults to \n * the child components to show the Post and User objects.\n */\nfunction SearchResults() {\n  const postsResults = useSelector((st: CustomReduxState) => st.searchResults.posts);\n  const usersResults = useSelector((st: CustomReduxState) => st.searchResults.users);\n  const [isSearched, setIsSearched] = useState<boolean>(false);\n  const dispatch = useDispatch();\n\n  // get the query value for \"term\" to display or \n  // search backend if user has altered url instead of using search bar.\n  const search = window.location.search;\n  const params = new URLSearchParams(search);\n  const searchTerm = params.get(\"term\");\n  \n  useEffect(function handleSearch() {\n    // if the user alters the URL, the component will dispatch\n    // `getSearchResultsFromAPI` with the searchTerm retrieved\n    // from the URL query params.\n    if (!isSearched) {\n      if (searchTerm) {\n        dispatch(getSearchResultsFromAPI(searchTerm));\n      }\n      setIsSearched(true);\n    }\n  }, []);\n\n  return (\n    <Container className=\"SearchResults text-left\">\n      <h1 className=\"mt-3\">Search results for '{searchTerm}'</h1>\n      <Row className=\"mt-5\">\n        <Col md={8}>\n          <h3>Posts results</h3>\n          <BlogList posts={postsResults} />\n        </Col>\n        <Col md={4}>\n          <h3>Users results</h3>\n          <UserList users={usersResults} />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default SearchResults;","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/RoutedPages/PostDetails/index.tsx",["158"],"import React, { useEffect, useState, Fragment } from \"react\";\nimport { Alert, Button, Col, Container, Row } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router\";\nimport moment from \"moment\";\nimport CommentList from \"../../CommentList\";\nimport { BASE_URL } from \"../../config\";\nimport FavoriteButton from \"../../FavoriteButton\";\nimport \"./PostDetails.css\";\nimport { Post, Comment, CustomReduxState } from \"../../custom\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport EditFormModal from \"../../EditFormModal\";\nimport DeleteModal from \"../../DeleteModal\";\nimport { deletePostFromAPI, updateCurrentPost } from \"../../redux/actionCreators\";\nimport { changeToURLFriendly, getCookie } from \"../../helpers\";\n\n/**\n * `PostDetails` renders a post's data in full and a `FavoriteButton` and a\n * `CommentList` components.\n *  Holds logic for creating API calls to...\n * - GET post by post id\n * - GET comment by post id\n * - PATCH post by post id (requires login and user is author)\n * - DELETE post by post id (requires login and user is author)\n */\nfunction PostDetails() {\n  const { postId } = useParams<{ postId: string, postTitle: string }>();\n  const currUser = useSelector((st: CustomReduxState) => st.user);\n  const posts = useSelector((st: CustomReduxState) => st.posts);\n  const [post, setPost] = useState<Post>();\n  const [comments, setComments] = useState<Array<Comment>>([]);\n  const [isAuthor, setIsAuthor] = useState<boolean>(false);\n  const [serverErr, setServerErr] = useState<string>(\"\");\n  const [showEditForm, setShowEditForm] = useState<boolean>(false);\n  const [showDelConf, setShowDelConf] = useState<boolean>(false);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  useEffect(function handleGetPost() {\n    // retrieve the post from the API.\n    async function getPost() {\n      try {\n        const postRes = await fetch(`${BASE_URL}/posts/${postId}`);\n        const postData = await postRes.json();\n        setPost(postData.post);\n        setIsAuthor(postData.post.author_id === currUser.id);\n      } catch (err) {\n        setServerErr(\"This post either has been deleted or does not exist.\");\n      }\n    }\n\n    // retrieve the comments to the current post from API.\n    async function getComments() {\n      const commentsRes = await fetch(`${BASE_URL}/comments/${postId}`);\n      const commentsData = await commentsRes.json();\n      let commentsSortedByCreateDate: Array<Comment> = [];\n      if (commentsData.comments) {\n        commentsSortedByCreateDate = commentsData.comments.sort((a: Comment, b: Comment) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n      }\n      setComments(commentsSortedByCreateDate);\n    }\n\n    // search for the post in the current redux store's `posts` state\n    let foundPost = posts.filter((p: Post) => {\n      return p.id === parseInt(postId);\n    })[0];\n\n    if (!foundPost) {\n      // if the post is not in the current redux store's `posts` state, call getPost()\n      getPost();\n    } else {\n      setIsAuthor(foundPost.author_id === currUser.id);\n      setPost(foundPost);\n    }\n    // retrieve comments for the post.\n    getComments();\n  }, [postId]);\n\n  const updatePost = async (data: Post) => {\n    setServerErr(\"\");\n    // requires user login to update a post\n    let token = getCookie(\"token\");\n    if (post && token) {\n      const res = await fetch(`${BASE_URL}/posts/${post.id}`, {\n        method: \"PATCH\",\n        credentials: \"include\",\n        body: JSON.stringify({ ...data }),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n      const resData = await res.json();\n      if (res.status === 200) {\n        // set the updatedPost to the `post` state.\n        let updatedPost = { ...post, ...data, ...resData }\n        setPost(updatedPost);\n        // send dispatch to update the current post in the redux store `posts` state.\n        dispatch(updateCurrentPost(updatedPost));\n      } else {\n        setServerErr(resData.message);\n      }\n    }\n  }\n  \n  const deletePost = async () => {\n    setServerErr(\"\");\n    let token = getCookie(\"token\");\n    if (post && token) {\n      dispatch(deletePostFromAPI(post.id));\n      history.push(\"/\");\n    }\n  }\n  \n  const postComment = async (postId: number, commentId: number | undefined, isReply: boolean, comment: string) => {\n    // requires user login to create a post.\n    let token = getCookie(\"token\");\n    if (post && token) {\n      const newComment = {\n        body: comment,\n        post_id: postId,\n        reply_to_comment_id: commentId,\n        author_id: currUser.id,\n        is_reply: isReply\n      };\n      \n      setServerErr(\"\");\n      \n      try {\n        const res = await fetch(`${BASE_URL}/comments`, {\n          method: \"POST\",\n          body: JSON.stringify(newComment),\n          headers: {\n            \"Content-type\": \"application/json\"\n          }\n        });\n        const commentData = await res.json();\n        if (res.status === 201) {\n          // if the comment made is not a reply,\n          //   add comment to the current `comment` state\n          if (!isReply) {\n            setComments((currComments) => [...currComments,\n              {\n                ...newComment,\n                created_at: commentData.created_at,\n                id: commentData.id,\n                author_name: currUser.display_name,\n                author_photo: currUser.photo_url,\n                reply_count: \"0\"\n              }]);\n            }\n          } else {\n            setServerErr(commentData.error.message);\n          }\n        } catch (err) {\n          setServerErr(\"Something went wrong with posting a comment\");\n        }\n      }\n    }\n    \n    const handleShowEdit = () => setShowEditForm(true);\n    const handleCloseEdit = () => setShowEditForm(false);\n    const handleCloseDel = () => setShowDelConf(false);\n    const handleShowDel = () => setShowDelConf(true);\n\n    return (\n      <div className=\"PostDetails mt-5\">\n      { showEditForm && <EditFormModal show={showEditForm} handleClose={handleCloseEdit} item={post} editItem={updatePost} />}\n      { showDelConf && <DeleteModal show={showDelConf} handleClose={handleCloseDel} deletePost={deletePost} />}\n      <Container >\n        {serverErr && <Alert variant=\"danger\">{serverErr}</Alert>}\n        {post &&\n          <Fragment>\n            <div className=\"PostDetails-post text-left\">\n              <Row className=\"d-flex justify-content-between\">\n                <Col md={9} className=\"d-flex align-items-center\">\n                  <h2 className=\"PostDetails-title\">{post.title} </h2>\n                  <FavoriteButton post={post} />\n                </Col>\n                {/** Edit/Delete buttons show only if current user is the author of the post */}\n                {isAuthor && <Col md={3} className=\"d-flex align-items-center justify-content-end\">\n                  <Button variant=\"info\" onClick={handleShowEdit}><FontAwesomeIcon icon={faEdit} /> Edit</Button>\n                  <Button variant=\"danger\" className=\"ml-3\" onClick={handleShowDel}><FontAwesomeIcon icon={faTrash} /> Delete</Button>\n                </Col>}\n              </Row>\n              <div className=\"text-muted\">{post.description}</div>\n              <div className=\"text-muted\">\n                Posted by <a href={`/users/${post.author_id}/${changeToURLFriendly(post.author_name)}/favorites`}><span className=\"App-author\">{post.author_name}</span></a> {moment(post.created_at).fromNow()}\n                {post.last_updated_at !== post.created_at && <span className=\"App-update\"> (last updated {moment(post.last_updated_at).fromNow()})</span>}</div>\n              <div className=\"PostDetails-body\">{post.body}</div>\n            </div>\n            <CommentList comments={comments} postId={post.id} postComment={postComment} />\n          </Fragment>\n        }\n      </Container>\n    </div>\n  );\n};\n\nexport default PostDetails;","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/EditFormModal/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/DeleteModal/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/FavoriteButton/index.tsx",["159"],"import { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart as farHeart } from \"@fortawesome/free-regular-svg-icons\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./FavoriteButton.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addFavoriteToAPI, deleteFavoriteFromAPI } from \"../redux/actionCreators\";\nimport { CustomReduxState, Post } from \"../custom\";\nimport { getCookie, isFavorited } from \"../helpers\";\n\ninterface IProp {\n  post: Post\n}\n\n/**\n * `FavoriteButton` renders a Heart icon and displays the number of favorites for a post.\n *  *Only logged in users may use the button*\n * `FavoriteButton` handles the logic for dispatching `addFavoriteToAPI` and `deleteFavoriteFromAPI`\n */\nfunction FavoriteButton({ post }: IProp) {\n  const dispatch = useDispatch();\n  const favorites = useSelector((st: CustomReduxState) => st.favorites);\n  const [favorited, setFavorited] = useState<boolean>(false);\n  const posts = useSelector((st: CustomReduxState) => st.posts);\n\n  //**FIXED**: Fix issue where the setFavorited doesn't change when a user clicks \"unfavorite\"\n  // on the same post, but different card. \n  // ex. User clicks the FavoriteButton to unfavorite their published post: `post id 1` from the `Favorites List`.\n  // The `post id 1` card in their published post list is still solid.\n\n  // If the post is found in the redux store's `favorites` state, \n  // set favorited to true.\n  useEffect(function handleFavoriteStatus() {\n    if (isFavorited(post.id, favorites)) {\n      setFavorited(true);\n    } else {\n      // POST-SUBMISSION UPDATE: Add an else statement to setFavorited to false.\n      setFavorited(false);\n    }\n    // POST-SUBMISSION UPDATE: Add `favorites` to the dependency array to rerender when favorites changes.\n  }, [favorites]);\n\n  /**\n   * Dispatches action creators depending on `type` input.\n   * (Only allows logged in users to invoke dispatch)\n   */\n  const handleFavorites = async (type: string) => {\n    if (!getCookie(\"token\")) {\n      alert(\"Must be signed in to favorite.\");\n    } else {\n      let currFavCount = parseInt(post.favorite_count);\n      switch (type) {\n        case \"ADD\":\n          setFavorited(true);\n          dispatch(addFavoriteToAPI(post));\n          // if the redux store's `posts` state is empty, \n          //    the component need to manually update the favCount to display.\n          if (posts.length === 0) {\n            post.favorite_count = (currFavCount + 1).toString();\n          }\n          break;\n        case \"DELETE\":\n          setFavorited(false);\n          dispatch(deleteFavoriteFromAPI(post.id));\n          if (posts.length === 0) {\n            post.favorite_count = (currFavCount - 1).toString();\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  return (\n    <div className=\"FavoriteButton d-flex align-items-center\">\n      { favorited ?\n        <FontAwesomeIcon className=\"FavoriteButton-btn\" icon={faHeart} size=\"1x\" onClick={() => handleFavorites(\"DELETE\")} />\n        :\n        <FontAwesomeIcon className=\"FavoriteButton-btn\" icon={farHeart} size=\"1x\" onClick={() => handleFavorites(\"ADD\")} />\n      }\n      <span>{post.favorite_count}</span>\n    </div>\n  );\n};\n\nexport default FavoriteButton;","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/UserList/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/CommentList/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/UserProfilePhoto/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/BlogList/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/UploadPhotoModal/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/FavoritesList/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/Forms/SignUpForm/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/Forms/LoginForm/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/Forms/BlogForm/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/SortSelection/index.tsx",["160"],"import React, { useEffect, useState } from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { Post } from \"../custom\";\n\ninterface IProp {\n  posts: Array<Post>,\n  handlePostSort: Function,\n  currentSort: string\n}\n\n/**\n * `SortSelection` renders a dropdown that enables a user to sort\n * posts by \"most recent\", \"most favorited\", and \"least favorited\".\n */\nfunction SortSelection({ posts, handlePostSort, currentSort }: IProp) {\n  const DEFAULT_SORT_SELECT = \"most recent\";\n  const [ sortType, setSortType ] = useState<string>(DEFAULT_SORT_SELECT);\n\n  // useEffect for ensuring the current sort type will be the recently selected sort type\n  // - ensures it stays the same sort type when a user causes a re-render of Homepage \n  //   (caused by the change in global state of posts from favoriting/unfavoriting)\n  useEffect(() => {\n    handleSelection(currentSort);\n  }, [posts]);\n\n  const handleSelection = (eventKey: string | null) => {\n    let sortedPosts;\n    switch (eventKey) {\n      case \"mostFavorite\":\n        setSortType(\"most favorited\");\n        sortedPosts = posts.slice().sort((a, b) => parseInt(b.favorite_count) - parseInt(a.favorite_count));\n        handlePostSort(sortedPosts, eventKey);\n        break;\n      case \"leastFavorite\":\n        setSortType(\"least favorited\");\n        sortedPosts = posts.slice().sort((a, b) => parseInt(a.favorite_count) - parseInt(b.favorite_count));\n        handlePostSort(sortedPosts, eventKey);\n        break;\n      case \"mostRecent\":\n        setSortType(DEFAULT_SORT_SELECT);\n        sortedPosts = posts.slice().sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n        handlePostSort(sortedPosts, eventKey);\n        break;\n      default:\n        setSortType(DEFAULT_SORT_SELECT);\n        handlePostSort(posts, eventKey);\n        break;\n    }\n  }\n\n  return (\n    <div className=\"SortSelection d-flex align-items-center\">\n      View by:\n      <Dropdown className=\"ml-2\">\n        <Dropdown.Toggle variant=\"primary\" id=\"filter-dropdown\">\n          {sortType}\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item eventKey=\"mostRecent\" onSelect={handleSelection} >most recent</Dropdown.Item>\n          <Dropdown.Item eventKey=\"mostFavorite\" onSelect={handleSelection} >most favorited</Dropdown.Item>\n          <Dropdown.Item eventKey=\"leastFavorite\" onSelect={handleSelection} >least favorited</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </div>\n  );\n};\n\nexport default SortSelection;","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/UserCard/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/Forms/CommentForm/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/CommentCard/index.tsx",["161"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Card } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport CommentReplyAccord from \"../CommentReplyAccord\";\nimport { Comment } from \"../custom\";\nimport \"./CommentCard.css\";\nimport CommentForm from \"../Forms/CommentForm\";\nimport UserProfilePhoto from \"../UserProfilePhoto\";\nimport { useHistory } from \"react-router\";\nimport { changeToURLFriendly } from \"./../helpers\";\n\ninterface IProp {\n  comment: Comment,\n  handlePostReply: Function | undefined\n}\n\n/** \n * `CommentCard` renders a Comment object as a Card UI item.\n * - invokes handlePostReply once a submit occurs in `CommentForm` (allowing for commenting replies)\n * - displays an option to toggle `CommentForm` if the Comment is not a reply comment.\n * - displays `CommentReplyAccord` if a Comment has at least 1 reply comment.\n */\nfunction CommentCard({ comment, handlePostReply }: IProp) {\n  const [showCommentForm, setShowCommentForm] = useState<boolean>(false);\n  const [replyCount, setReplyCount] = useState<number>(0);\n  const history = useHistory();\n\n  useEffect(() => {\n    setReplyCount(parseInt(comment.reply_count));\n  }, []);\n\n  /** Passes the data needed for a new comment to the parent component's function. */\n  const postReply = (postId: number, commentId: undefined, isReply: boolean, body: string) => {\n    if (handlePostReply) {\n      handlePostReply(postId, commentId, isReply, body);\n      setShowCommentForm(false);\n    }\n\n    // if the comment is a reply to another comment, increment the `replyCount` state.\n    // this will cause the `CommentReplyAccord` to re-render due to the replyCount passed as a `key` property.\n    if (isReply) {\n      setReplyCount(replyCount + 1);\n    }\n  }\n\n  const redirectToProfile = () => {\n    // go to their profile\n    history.push(`/users/${comment.author_id}/${changeToURLFriendly(comment.author_name)}/favorites`);\n  }\n\n  return (\n    <div className=\"CommentCard text-left\">\n      <Card>\n        <Card.Body>\n          <Card.Text>{comment.body}</Card.Text>\n          <div className=\"text-muted d-flex justify-content-between\">\n            <span className=\"d-flex flex-row align-items-center\">\n              <UserProfilePhoto username={comment.author_name} photoUrl={comment.author_photo} handlePhotoClick={redirectToProfile} width=\"2rem\" />\n              <span className=\"App-author ml-2 mr-1\">{comment.author_name}</span>\n              commented {moment(comment.created_at).fromNow()}\n            </span>\n            {/* Only show 'Reply' button if the comment is not a reply comment. */}\n            {!comment.is_reply && <Button onClick={() => setShowCommentForm(!showCommentForm)}>{showCommentForm ? \"Cancel\" : \"Reply\"}</Button>}\n          </div>\n          {/* Show `CommentForm` if showCommentForm is true */}\n          {showCommentForm && <CommentForm postId={comment.post_id} commentId={comment.id} isReply={true} handlePostComment={postReply} />}\n          {/* If a comment has replies, show a collapsible of the comment's replies */}\n          {replyCount > 0 && <CommentReplyAccord key={replyCount} replyCount={replyCount.toString()} commentId={comment.id} />}\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default CommentCard;","/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/BlogCard/index.tsx",[],"/Users/sugbit/Documents/blend-apprentice-project/bloggies_frontend/src/CommentReplyAccord/index.tsx",[],{"ruleId":"162","severity":1,"message":"163","line":27,"column":6,"nodeType":"164","endLine":27,"endColumn":8,"suggestions":"165"},{"ruleId":"162","severity":1,"message":"166","line":30,"column":6,"nodeType":"164","endLine":30,"endColumn":8,"suggestions":"167"},{"ruleId":"162","severity":1,"message":"168","line":73,"column":6,"nodeType":"164","endLine":73,"endColumn":14,"suggestions":"169"},{"ruleId":"162","severity":1,"message":"170","line":36,"column":6,"nodeType":"164","endLine":36,"endColumn":8,"suggestions":"171"},{"ruleId":"162","severity":1,"message":"172","line":78,"column":6,"nodeType":"164","endLine":78,"endColumn":14,"suggestions":"173"},{"ruleId":"162","severity":1,"message":"174","line":41,"column":6,"nodeType":"164","endLine":41,"endColumn":17,"suggestions":"175"},{"ruleId":"162","severity":1,"message":"176","line":24,"column":6,"nodeType":"164","endLine":24,"endColumn":13,"suggestions":"177"},{"ruleId":"162","severity":1,"message":"178","line":30,"column":6,"nodeType":"164","endLine":30,"endColumn":8,"suggestions":"179"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'userId'. Either include them or remove the dependency array.","ArrayExpression",["180"],"React Hook useEffect has missing dependencies: 'dispatch' and 'postsList'. Either include them or remove the dependency array.",["181"],"React Hook useEffect has missing dependencies: 'currUser.id' and 'currUser.photo_url'. Either include them or remove the dependency array.",["182"],"React Hook useEffect has missing dependencies: 'dispatch', 'isSearched', and 'searchTerm'. Either include them or remove the dependency array.",["183"],"React Hook useEffect has missing dependencies: 'currUser.id' and 'posts'. Either include them or remove the dependency array.",["184"],"React Hook useEffect has a missing dependency: 'post.id'. Either include it or remove the dependency array.",["185"],"React Hook useEffect has missing dependencies: 'currentSort' and 'handleSelection'. Either include them or remove the dependency array.",["186"],"React Hook useEffect has a missing dependency: 'comment.reply_count'. Either include it or remove the dependency array. If 'setReplyCount' needs the current value of 'comment.reply_count', you can also switch to useReducer instead of useState and read 'comment.reply_count' in the reducer.",["187"],{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},"Update the dependencies array to be: [dispatch, userId]",{"range":"204","text":"205"},"Update the dependencies array to be: [dispatch, postsList]",{"range":"206","text":"207"},"Update the dependencies array to be: [currUser.id, currUser.photo_url, userId]",{"range":"208","text":"209"},"Update the dependencies array to be: [dispatch, isSearched, searchTerm]",{"range":"210","text":"211"},"Update the dependencies array to be: [currUser.id, postId, posts]",{"range":"212","text":"213"},"Update the dependencies array to be: [favorites, post.id]",{"range":"214","text":"215"},"Update the dependencies array to be: [currentSort, handleSelection, posts]",{"range":"216","text":"217"},"Update the dependencies array to be: [comment.reply_count]",{"range":"218","text":"219"},[1022,1024],"[dispatch, userId]",[1405,1407],"[dispatch, postsList]",[2842,2850],"[currUser.id, currUser.photo_url, userId]",[1498,1500],"[dispatch, isSearched, searchTerm]",[3315,3323],"[currUser.id, postId, posts]",[1862,1873],"[favorites, post.id]",[879,886],"[currentSort, handleSelection, posts]",[1164,1166],"[comment.reply_count]"]