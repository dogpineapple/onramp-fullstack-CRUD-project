[{"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/App.tsx":"1","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/NavBar/index.tsx":"2","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/LoginForm/index.tsx":"3","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/SignUpForm/index.tsx":"4","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/BlogCard/index.tsx":"5","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/BlogList/index.tsx":"6","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/index.tsx":"7","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/config.tsx":"8","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/SearchBar/index.tsx":"9","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/FavoriteButton/index.tsx":"10","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/actionTypes.tsx":"11","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/actionCreators.tsx":"12","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/rootReducer.tsx":"13","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentList/index.tsx":"14","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentCard/index.tsx":"15","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/helpers.tsx":"16","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/CommentForm/index.tsx":"17","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/FavoritesList/index.tsx":"18","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/reportWebVitals.ts":"19","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/SortSelection/index.tsx":"20","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/BlogForm/index.tsx":"21","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/EditFormModal/index.tsx":"22","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/DeleteModal/index.tsx":"23","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/UserCard/index.tsx":"24","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/UserList/index.tsx":"25","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Register/index.tsx":"26","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/PostDetails/index.tsx":"27","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/ComposePage/index.tsx":"28","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentReplyAccord/index.tsx":"29","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Routes/index.tsx":"30","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Homepage/index.tsx":"31","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/SearchResults/index.tsx":"32","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/UserProfile/index.tsx":"33","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Login/index.tsx":"34"},{"size":1091,"mtime":1612909785795,"results":"35","hashOfConfig":"36"},{"size":2396,"mtime":1612909820780,"results":"37","hashOfConfig":"36"},{"size":1440,"mtime":1610496856262,"results":"38","hashOfConfig":"36"},{"size":3805,"mtime":1610496968631,"results":"39","hashOfConfig":"36"},{"size":1792,"mtime":1610422108585,"results":"40","hashOfConfig":"36"},{"size":786,"mtime":1610429011726,"results":"41","hashOfConfig":"36"},{"size":1434,"mtime":1610497142362,"results":"42","hashOfConfig":"36"},{"size":48,"mtime":1612834292774,"results":"43","hashOfConfig":"36"},{"size":1438,"mtime":1610258344932,"results":"44","hashOfConfig":"36"},{"size":3327,"mtime":1612909811365,"results":"45","hashOfConfig":"36"},{"size":569,"mtime":1610325790594,"results":"46","hashOfConfig":"36"},{"size":5647,"mtime":1612909763405,"results":"47","hashOfConfig":"36"},{"size":3127,"mtime":1612847958756,"results":"48","hashOfConfig":"36"},{"size":1398,"mtime":1610422038486,"results":"49","hashOfConfig":"36"},{"size":2287,"mtime":1610338236765,"results":"50","hashOfConfig":"36"},{"size":1691,"mtime":1612908701066,"results":"51","hashOfConfig":"36"},{"size":1325,"mtime":1610423812245,"results":"52","hashOfConfig":"36"},{"size":794,"mtime":1610422952413,"results":"53","hashOfConfig":"36"},{"size":425,"mtime":1610058522094,"results":"54","hashOfConfig":"36"},{"size":2514,"mtime":1612834292772,"results":"55","hashOfConfig":"36"},{"size":2041,"mtime":1610425176737,"results":"56","hashOfConfig":"36"},{"size":979,"mtime":1610495344909,"results":"57","hashOfConfig":"36"},{"size":907,"mtime":1610491272929,"results":"58","hashOfConfig":"36"},{"size":864,"mtime":1610428813041,"results":"59","hashOfConfig":"36"},{"size":791,"mtime":1610428885433,"results":"60","hashOfConfig":"36"},{"size":2787,"mtime":1612909889486,"results":"61","hashOfConfig":"36"},{"size":7845,"mtime":1612836636817,"results":"62","hashOfConfig":"36"},{"size":1036,"mtime":1612909836289,"results":"63","hashOfConfig":"36"},{"size":1717,"mtime":1610448379609,"results":"64","hashOfConfig":"36"},{"size":1407,"mtime":1610450081846,"results":"65","hashOfConfig":"36"},{"size":2126,"mtime":1612834292766,"results":"66","hashOfConfig":"36"},{"size":1956,"mtime":1610428482302,"results":"67","hashOfConfig":"36"},{"size":2831,"mtime":1612846889416,"results":"68","hashOfConfig":"36"},{"size":2236,"mtime":1612909864807,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"dka9vg",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"95"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"95"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"95"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/App.tsx",["148"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/NavBar/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/LoginForm/index.tsx",[],["149","150"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/SignUpForm/index.tsx",[],["151","152"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/BlogCard/index.tsx",[],["153","154"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/BlogList/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/config.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/SearchBar/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/FavoriteButton/index.tsx",["155"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/actionTypes.tsx",[],["156","157"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/actionCreators.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/rootReducer.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentList/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentCard/index.tsx",["158"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/helpers.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/CommentForm/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/FavoritesList/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/reportWebVitals.ts",[],["159","160"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/SortSelection/index.tsx",["161"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/BlogForm/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/EditFormModal/index.tsx",[],["162","163"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/DeleteModal/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/UserCard/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/UserList/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Register/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/PostDetails/index.tsx",["164"],"import React, { useEffect, useState, Fragment } from \"react\";\nimport { Alert, Button, Col, Container, Row } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router\";\nimport moment from \"moment\";\nimport CommentList from \"../../CommentList\";\nimport { BASE_URL } from \"../../config\";\nimport FavoriteButton from \"../../FavoriteButton\";\nimport \"./PostDetails.css\";\nimport { Post, Comment, CustomReduxState } from \"../../custom\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport EditFormModal from \"../../EditFormModal\";\nimport DeleteModal from \"../../DeleteModal\";\nimport { deletePostFromAPI, updateCurrentPost } from \"../../redux/actionCreators\";\nimport { changeToURLFriendly } from \"../../helpers\";\n\n/**\n * `PostDetails` renders a post's data in full and a `FavoriteButton` and a\n * `CommentList` components.\n *  Holds logic for creating API calls to...\n * - GET post by post id\n * - GET comment by post id\n * - PATCH post by post id (requires login and user is author)\n * - DELETE post by post id (requires login and user is author)\n */\nfunction PostDetails() {\n  const { postId } = useParams<{ postId: string, postTitle: string }>();\n  const currUser = useSelector((st: CustomReduxState) => st.user);\n  const posts = useSelector((st: CustomReduxState) => st.posts);\n  const [post, setPost] = useState<Post>();\n  const [comments, setComments] = useState<Array<Comment>>([]);\n  const [isAuthor, setIsAuthor] = useState<boolean>(false);\n  const [serverErr, setServerErr] = useState<string>(\"\");\n  const [showEditForm, setShowEditForm] = useState<boolean>(false);\n  const [showDelConf, setShowDelConf] = useState<boolean>(false);\n  const _token = localStorage.getItem(\"token\");\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  useEffect(function handleGetPost() {\n    // retrieve the post from the API.\n    async function getPost() {\n      try {\n        const postRes = await fetch(`${BASE_URL}/posts/${postId}`);\n        const postData = await postRes.json();\n        setPost(postData.post);\n        setIsAuthor(postData.post.author_id === currUser.id);\n      } catch (err) {\n        setServerErr(\"This post either has been deleted or does not exist.\");\n      }\n    }\n\n    // retrieve the comments to the current post from API.\n    async function getComments() {\n      const commentsRes = await fetch(`${BASE_URL}/comments/${postId}`);\n      const commentsData = await commentsRes.json();\n      const commentsSortedByCreateDate = commentsData.comments.sort((a: Comment, b: Comment) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n      setComments(commentsSortedByCreateDate);\n    }\n\n    // search for the post in the current redux store's `posts` state\n    let foundPost = posts.filter((p: Post) => {\n      return p.id === parseInt(postId);\n    })[0];\n\n    if (!foundPost) {\n      // if the post is not in the current redux store's `posts` state, call getPost()\n      getPost();\n    } else {\n      setIsAuthor(foundPost.author_id === currUser.id);\n      setPost(foundPost);\n    }\n    // retrieve comments for the post.\n    getComments();\n  }, [postId]);\n\n  const updatePost = async (data: Post) => {\n    setServerErr(\"\");\n    // requires user login to update a post\n    if (post && _token) {\n      const res = await fetch(`${BASE_URL}/posts/${post.id}`, {\n        method: \"PATCH\",\n        credentials: \"include\",\n        body: JSON.stringify({ ...data, _token }),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n      const resData = await res.json();\n      if (res.status === 200) {\n        // set the updatedPost to the `post` state.\n        let updatedPost = { ...post, ...data, ...resData }\n        setPost(updatedPost);\n        // send dispatch to update the current post in the redux store `posts` state.\n        dispatch(updateCurrentPost(updatedPost));\n      } else {\n        setServerErr(resData.message);\n      }\n    }\n  }\n  \n  const deletePost = async () => {\n    setServerErr(\"\");\n    if (post && _token) {\n      dispatch(deletePostFromAPI(post.id, _token));\n      history.push(\"/\");\n    }\n  }\n  \n  const postComment = async (postId: number, commentId: number | undefined, isReply: boolean, comment: string) => {\n    // requires user login to create a post.\n    if (post && _token) {\n      const newComment = {\n        body: comment,\n        post_id: postId,\n        reply_to_comment_id: commentId,\n        author_id: currUser.id,\n        is_reply: isReply\n      };\n      \n      setServerErr(\"\");\n      \n      try {\n        const res = await fetch(`${BASE_URL}/comments`, {\n          method: \"POST\",\n          body: JSON.stringify(newComment),\n          headers: {\n            \"Content-type\": \"application/json\"\n          }\n        });\n        const commentData = await res.json();\n        if (res.status === 201) {\n          // if the comment made is not a reply,\n          //   add comment to the current `comment` state\n          if (!isReply) {\n            setComments((currComments) => [...currComments,\n              {\n                ...newComment,\n                created_at: commentData.created_at,\n                id: commentData.id,\n                author_name: currUser.display_name,\n                reply_count: \"0\"\n              }]);\n            }\n          } else {\n            setServerErr(commentData.error.message);\n          }\n        } catch (err) {\n          setServerErr(\"Something went wrong with posting a comment\");\n        }\n      }\n    }\n    \n    const handleShowEdit = () => setShowEditForm(true);\n    const handleCloseEdit = () => setShowEditForm(false);\n    const handleCloseDel = () => setShowDelConf(false);\n    const handleShowDel = () => setShowDelConf(true);\n\n    return (\n      <div className=\"PostDetails mt-5\">\n      { showEditForm && <EditFormModal show={showEditForm} handleClose={handleCloseEdit} item={post} editItem={updatePost} />}\n      { showDelConf && <DeleteModal show={showDelConf} handleClose={handleCloseDel} deletePost={deletePost} />}\n      <Container >\n        {serverErr && <Alert variant=\"danger\">{serverErr}</Alert>}\n        {post &&\n          <Fragment>\n            <div className=\"PostDetails-post text-left\">\n              <Row className=\"d-flex justify-content-between\">\n                <Col md={9} className=\"d-flex align-items-center\">\n                  <h2 className=\"PostDetails-title\">{post.title} </h2>\n                  <FavoriteButton post={post} />\n                </Col>\n                {/** Edit/Delete buttons show only if current user is the author of the post */}\n                {isAuthor && <Col md={3} className=\"d-flex align-items-center justify-content-end\">\n                  <Button variant=\"info\" onClick={handleShowEdit}><FontAwesomeIcon icon={faEdit} /> Edit</Button>\n                  <Button variant=\"danger\" className=\"ml-3\" onClick={handleShowDel}><FontAwesomeIcon icon={faTrash} /> Delete</Button>\n                </Col>}\n              </Row>\n              <div className=\"text-muted\">{post.description}</div>\n              <div className=\"text-muted\">\n                Posted by <a href={`/users/${post.author_id}/${changeToURLFriendly(post.author_name)}/favorites`}><span className=\"App-author\">{post.author_name}</span></a> {moment(post.created_at).fromNow()}\n                {post.last_updated_at !== post.created_at && <span className=\"App-update\"> (last updated {moment(post.last_updated_at).fromNow()})</span>}</div>\n              <div className=\"PostDetails-body\">{post.body}</div>\n            </div>\n            <CommentList comments={comments} postId={post.id} postComment={postComment} />\n          </Fragment>\n        }\n      </Container>\n    </div>\n  );\n};\n\nexport default PostDetails;","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/ComposePage/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentReplyAccord/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Routes/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Homepage/index.tsx",["165"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport BlogList from \"../../BlogList\";\nimport { CustomReduxState, Post } from \"../../custom\";\nimport { getPostsFromAPI } from \"../../redux/actionCreators\";\nimport SortSelection from \"../../SortSelection\";\n\n/**\n * `Homepage` renders `BlogList` and `SortSelection` components.\n * If posts do not exist in current redux store, it dispatches an action to\n * `getPostsFromAPI`.\n */\nfunction Homepage() {\n  const postsList = useSelector((st: CustomReduxState) => st.posts.sort((a: Post, b: Post) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime()));\n  const dispatch = useDispatch();\n  const [posts, setPosts] = useState<Array<Post>>([]);\n  const [sortType, setSortType] = useState(\"mostRecent\")\n\n  useEffect(function handleLoadPosts() {\n    if (postsList.length === 0) {\n      dispatch(getPostsFromAPI());\n    } else {\n      setPosts(postsList);\n    }\n    /*POST-SUBMIT BUG FIXED: Changing the favorites count on a post will reset the order to \"most recent\" \n        WHY: because the dependency array had postsList, which causes `setPosts(postsList)` to run, resetting the order\n              to \"most recent\". \n        FIX: Pass the current sort `sortType` to the sortSelection, which will re-sort when posts changes. */\n  }, []);\n\n  // invoked in `SortSelection` component when a user chooses a sort type in the dropdown.\n  const handlePostSort = (sortedPosts: Array<Post>, newSortType: string) => {\n    setPosts(sortedPosts);\n    setSortType(newSortType);\n  }\n\n  return (\n    <div className=\"Homepage\">\n      <Container>\n        <Row className=\"mt-4\">\n          <Col md={12} className=\"d-flex align-items-center justify-content-between\">\n            <h1 className=\"text-left\">Bloggies newsfeed</h1>\n            <SortSelection handlePostSort={handlePostSort} posts={postsList} currentSort={sortType}/>\n          </Col>\n        </Row>\n        <BlogList key={sortType} posts={posts}/>\n      </Container>\n    </div>\n  );\n};\n\nexport default Homepage;","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/SearchResults/index.tsx",["166"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport BlogList from \"../../BlogList\";\nimport { CustomReduxState } from \"../../custom\";\nimport { getSearchResultsFromAPI } from \"../../redux/actionCreators\";\nimport UserList from \"../../UserList\";\n\n/**\n * `SearchResults` renders the page for the search results from a searched term.\n * Displays the `BlogList` and `UserList` and passes the postsResults and userResults to \n * the child components to show the Post and User objects.\n */\nfunction SearchResults() {\n  const postsResults = useSelector((st: CustomReduxState) => st.searchResults.posts);\n  const usersResults = useSelector((st: CustomReduxState) => st.searchResults.users);\n  const [isSearched, setIsSearched] = useState<boolean>(false);\n  const dispatch = useDispatch();\n\n  // get the query value for \"term\" to display or \n  // search backend if user has altered url instead of using search bar.\n  const search = window.location.search;\n  const params = new URLSearchParams(search);\n  const searchTerm = params.get(\"term\");\n  \n  useEffect(function handleSearch() {\n    // if the user alters the URL, the component will dispatch\n    // `getSearchResultsFromAPI` with the searchTerm retrieved\n    // from the URL query params.\n    if (!isSearched) {\n      if (searchTerm) {\n        dispatch(getSearchResultsFromAPI(searchTerm));\n      }\n      setIsSearched(true);\n    }\n  }, []);\n\n  return (\n    <Container className=\"SearchResults text-left\">\n      <h1 className=\"mt-3\">Search results for '{searchTerm}'</h1>\n      <Row className=\"mt-5\">\n        <Col md={8}>\n          <h3>Posts results</h3>\n          <BlogList posts={postsResults} />\n        </Col>\n        <Col md={4}>\n          <h3>Users results</h3>\n          <UserList users={usersResults} />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default SearchResults;","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/UserProfile/index.tsx",["167"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col, Alert } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router\";\nimport BlogList from \"../../BlogList\";\nimport { BASE_URL } from \"../../config\";\nimport { CustomReduxState, Post } from \"../../custom\";\nimport FavoritesList from \"../../FavoritesList\";\nimport { removeStrDashes } from \"../../helpers\";\nimport \"./UserProfile.css\";\n\n/**\n * `UserProfile` renders the page for displaying a user's `FavoritesList` and \n * Publications (`BlogList`).\n */\nfunction UserProfile() {\n  const currUserId = useSelector((st: CustomReduxState) => st.user.id);\n  const { userId, displayName } = useParams<{ userId: string, displayName: string }>();\n  const [isCurrUserProfile, setIsCurrUserProfile] = useState<boolean>(false);\n  const currUserFavs = useSelector((st: CustomReduxState) => st.favorites);\n  const [userFavs, setUserFavs] = useState<Array<Post>>([]);\n  const [userPosts, setUserPosts] = useState<Array<Post>>([]);\n  const [serverErr, setServerErr] = useState(\"\");\n\n  useEffect(function checkProfileOwner() {\n    // retrieve user favorites by a GET request with user id from params.\n    async function getUserFavorites() {\n      try {\n        const favRes = await fetch(`${BASE_URL}/favorites/${userId}`);\n        const favData = await favRes.json();\n        setUserFavs(favData.posts);\n      } catch (err) {\n        setServerErr(\"This user does not exist.\");\n      }\n    }\n\n    // retrieve user publications by a GET request with user id from params.\n    async function getUserPosts() {\n      try {\n        const userPostsRes = await fetch(`${BASE_URL}/posts/user/${userId}`);\n        const userPostsData = await userPostsRes.json();\n        setUserPosts(userPostsData.posts);\n      } catch (err) {\n        setServerErr(\"This user does not exist.\");\n      }\n    }\n\n    // if profile belongs to the current user, use redux data.\n    if (parseInt(userId) === currUserId) {\n      setIsCurrUserProfile(true);\n      getUserPosts();\n    } else {\n      // if not current user's profile, fetch the data from backend.\n      getUserFavorites();\n      getUserPosts();\n    }\n  }, [userId]);\n\n  return (\n    <Container className=\"UserProfile\">\n      <h1 className=\"mt-4\">{removeStrDashes(displayName)}'s profile</h1>\n      { serverErr && <Alert>{serverErr}</Alert>}\n      <Row>\n        <Col md={6}>\n          <Container>\n            <Row>\n              <h3 className=\"mt-4\">Publications</h3>\n            </Row>\n            <Row>\n              <BlogList posts={userPosts} />\n            </Row>\n          </Container>\n        </Col>\n        <Col md={6}>\n          <FavoritesList favorites={isCurrUserProfile ? currUserFavs : userFavs} />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default UserProfile;","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Login/index.tsx",[],{"ruleId":"168","severity":1,"message":"169","line":26,"column":6,"nodeType":"170","endLine":26,"endColumn":8,"suggestions":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"172","replacedBy":"176"},{"ruleId":"174","replacedBy":"177"},{"ruleId":"172","replacedBy":"178"},{"ruleId":"174","replacedBy":"179"},{"ruleId":"168","severity":1,"message":"180","line":41,"column":6,"nodeType":"170","endLine":41,"endColumn":17,"suggestions":"181"},{"ruleId":"172","replacedBy":"182"},{"ruleId":"174","replacedBy":"183"},{"ruleId":"168","severity":1,"message":"184","line":25,"column":6,"nodeType":"170","endLine":25,"endColumn":8,"suggestions":"185"},{"ruleId":"172","replacedBy":"186"},{"ruleId":"174","replacedBy":"187"},{"ruleId":"168","severity":1,"message":"188","line":24,"column":6,"nodeType":"170","endLine":24,"endColumn":13,"suggestions":"189"},{"ruleId":"172","replacedBy":"190"},{"ruleId":"174","replacedBy":"191"},{"ruleId":"168","severity":1,"message":"192","line":76,"column":6,"nodeType":"170","endLine":76,"endColumn":14,"suggestions":"193"},{"ruleId":"168","severity":1,"message":"194","line":30,"column":6,"nodeType":"170","endLine":30,"endColumn":8,"suggestions":"195"},{"ruleId":"168","severity":1,"message":"196","line":36,"column":6,"nodeType":"170","endLine":36,"endColumn":8,"suggestions":"197"},{"ruleId":"168","severity":1,"message":"198","line":57,"column":6,"nodeType":"170","endLine":57,"endColumn":14,"suggestions":"199"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["200"],"no-native-reassign",["201"],"no-negated-in-lhs",["202"],["201"],["202"],["201"],["202"],"React Hook useEffect has a missing dependency: 'post.id'. Either include it or remove the dependency array.",["203"],["201"],["202"],"React Hook useEffect has a missing dependency: 'comment.reply_count'. Either include it or remove the dependency array. If 'setReplyCount' needs the current value of 'comment.reply_count', you can also switch to useReducer instead of useState and read 'comment.reply_count' in the reducer.",["204"],["201"],["202"],"React Hook useEffect has missing dependencies: 'currentSort' and 'handleSelection'. Either include them or remove the dependency array.",["205"],["201"],["202"],"React Hook useEffect has missing dependencies: 'currUser.id' and 'posts'. Either include them or remove the dependency array.",["206"],"React Hook useEffect has missing dependencies: 'dispatch' and 'postsList'. Either include them or remove the dependency array.",["207"],"React Hook useEffect has missing dependencies: 'dispatch', 'isSearched', and 'searchTerm'. Either include them or remove the dependency array.",["208"],"React Hook useEffect has a missing dependency: 'currUserId'. Either include it or remove the dependency array.",["209"],{"desc":"210","fix":"211"},"no-global-assign","no-unsafe-negation",{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},"Update the dependencies array to be: [dispatch]",{"range":"226","text":"227"},"Update the dependencies array to be: [favorites, post.id]",{"range":"228","text":"229"},"Update the dependencies array to be: [comment.reply_count]",{"range":"230","text":"231"},"Update the dependencies array to be: [currentSort, handleSelection, posts]",{"range":"232","text":"233"},"Update the dependencies array to be: [currUser.id, postId, posts]",{"range":"234","text":"235"},"Update the dependencies array to be: [dispatch, postsList]",{"range":"236","text":"237"},"Update the dependencies array to be: [dispatch, isSearched, searchTerm]",{"range":"238","text":"239"},"Update the dependencies array to be: [currUserId, userId]",{"range":"240","text":"241"},[925,927],"[dispatch]",[1862,1873],"[favorites, post.id]",[880,882],"[comment.reply_count]",[879,886],"[currentSort, handleSelection, posts]",[3253,3261],"[currUser.id, postId, posts]",[1405,1407],"[dispatch, postsList]",[1498,1500],"[dispatch, isSearched, searchTerm]",[2195,2203],"[currUserId, userId]"]