[{"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/App.tsx":"1","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/NavBar/index.tsx":"2","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/LoginForm/index.tsx":"3","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/SignUpForm/index.tsx":"4","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/BlogCard/index.tsx":"5","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/BlogList/index.tsx":"6","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/index.tsx":"7","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/config.tsx":"8","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/SearchBar/index.tsx":"9","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/FavoriteButton/index.tsx":"10","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/actionTypes.tsx":"11","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/actionCreators.tsx":"12","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/rootReducer.tsx":"13","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentList/index.tsx":"14","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentCard/index.tsx":"15","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/helpers.tsx":"16","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/CommentForm/index.tsx":"17","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/FavoritesList/index.tsx":"18","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/reportWebVitals.ts":"19","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/SortSelection/index.tsx":"20","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/BlogForm/index.tsx":"21","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/EditFormModal/index.tsx":"22","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/DeleteModal/index.tsx":"23","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/UserCard/index.tsx":"24","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/UserList/index.tsx":"25","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Register/index.tsx":"26","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/PostDetails/index.tsx":"27","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/ComposePage/index.tsx":"28","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentReplyAccord/index.tsx":"29","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Routes/index.tsx":"30","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Homepage/index.tsx":"31","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/SearchResults/index.tsx":"32","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/UserProfile/index.tsx":"33"},{"size":877,"mtime":1610183842259,"results":"34","hashOfConfig":"35"},{"size":2316,"mtime":1610501822895,"results":"36","hashOfConfig":"35"},{"size":1440,"mtime":1610496856262,"results":"37","hashOfConfig":"35"},{"size":3805,"mtime":1610496968631,"results":"38","hashOfConfig":"35"},{"size":1792,"mtime":1610422108585,"results":"39","hashOfConfig":"35"},{"size":786,"mtime":1610429011726,"results":"40","hashOfConfig":"35"},{"size":1434,"mtime":1610497142362,"results":"41","hashOfConfig":"35"},{"size":48,"mtime":1610089711143,"results":"42","hashOfConfig":"35"},{"size":1438,"mtime":1610258344932,"results":"43","hashOfConfig":"35"},{"size":2764,"mtime":1610497816830,"results":"44","hashOfConfig":"35"},{"size":569,"mtime":1610325790594,"results":"45","hashOfConfig":"35"},{"size":5800,"mtime":1610497412480,"results":"46","hashOfConfig":"35"},{"size":3003,"mtime":1610498882539,"results":"47","hashOfConfig":"35"},{"size":1398,"mtime":1610422038486,"results":"48","hashOfConfig":"35"},{"size":2287,"mtime":1610338236765,"results":"49","hashOfConfig":"35"},{"size":937,"mtime":1610491249475,"results":"50","hashOfConfig":"35"},{"size":1237,"mtime":1610338094913,"results":"51","hashOfConfig":"35"},{"size":659,"mtime":1610247961639,"results":"52","hashOfConfig":"35"},{"size":425,"mtime":1610058522094,"results":"53","hashOfConfig":"35"},{"size":2136,"mtime":1610427154580,"results":"54","hashOfConfig":"35"},{"size":2041,"mtime":1610425176737,"results":"55","hashOfConfig":"35"},{"size":979,"mtime":1610495344909,"results":"56","hashOfConfig":"35"},{"size":825,"mtime":1610245949193,"results":"57","hashOfConfig":"35"},{"size":754,"mtime":1610322670294,"results":"58","hashOfConfig":"35"},{"size":791,"mtime":1610428885433,"results":"59","hashOfConfig":"35"},{"size":2571,"mtime":1610428298354,"results":"60","hashOfConfig":"35"},{"size":7813,"mtime":1610428184335,"results":"61","hashOfConfig":"35"},{"size":1004,"mtime":1610429002240,"results":"62","hashOfConfig":"35"},{"size":1717,"mtime":1610448379609,"results":"63","hashOfConfig":"35"},{"size":1407,"mtime":1610450081846,"results":"64","hashOfConfig":"35"},{"size":1744,"mtime":1610427223853,"results":"65","hashOfConfig":"35"},{"size":1956,"mtime":1610428482302,"results":"66","hashOfConfig":"35"},{"size":2786,"mtime":1610498948443,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},"dka9vg",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"93"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/App.tsx",["141"],"import React, { useEffect } from 'react';\nimport './App.css';\nimport './animations.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport PublicRoutes from './PublicRoutes';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch } from 'react-redux';\nimport { getUserFavoritesFromAPI, getUserInfoFromAPI } from './redux/actionCreators';\nimport NavBar from './NavBar';\n\nfunction App() {\n  const userId = ((st: any) => st.user.id);\n  const dispatch = useDispatch();\n\n  useEffect(function handleGetUser() {\n    const token = localStorage.getItem(\"token\");\n    if (token && !userId) {\n      dispatch(getUserInfoFromAPI(token));\n      dispatch(getUserFavoritesFromAPI(userId));\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <NavBar />\n        <PublicRoutes />\n      </BrowserRouter>\n    </div >\n  );\n}\n\nexport default App;\n",["142","143"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/NavBar/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/LoginForm/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/SignUpForm/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/BlogCard/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/BlogList/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/config.tsx",[],["144","145"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/SearchBar/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/FavoriteButton/index.tsx",["146"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/actionTypes.tsx",[],["147","148"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/actionCreators.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/rootReducer.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentList/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentCard/index.tsx",["149"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/helpers.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/CommentForm/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/FavoritesList/index.tsx",[],["150","151"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/reportWebVitals.ts",[],["152","153"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/SortSelection/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/BlogForm/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/EditFormModal/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/DeleteModal/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/UserCard/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/UserList/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Register/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/PostDetails/index.tsx",["154"],"import React, { useEffect, useState, Fragment } from \"react\";\nimport { Alert, Button, Col, Container, Row } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router\";\nimport moment from \"moment\";\nimport CommentList from \"../../CommentList\";\nimport { BASE_URL } from \"../../config\";\nimport FavoriteButton from \"../../FavoriteButton\";\nimport \"./PostDetails.css\";\nimport { Post, Comment, CustomReduxState } from \"../../custom\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport EditFormModal from \"../../EditFormModal\";\nimport DeleteModal from \"../../DeleteModal\";\nimport { deletePostFromAPI, updateCurrentPost } from \"../../redux/actionCreators\";\nimport { changeToURLFriendly } from \"../../helpers\";\n\n/**\n * `PostDetails` renders a post's data in full and a `FavoriteButton` and a\n * `CommentList` components.\n *  Holds logic for creating API calls to...\n * - GET post by post id\n * - GET comment by post id\n * - PATCH post by post id (requires login and user is author)\n * - DELETE post by post id (requires login and user is author)\n */\nfunction PostDetails() {\n  const { postId } = useParams<{ postId: string, postTitle: string }>();\n  const currUser = useSelector((st: CustomReduxState) => st.user);\n  const posts = useSelector((st: CustomReduxState) => st.posts);\n  const [post, setPost] = useState<Post>();\n  const [comments, setComments] = useState<Array<Comment>>([]);\n  const [isAuthor, setIsAuthor] = useState<boolean>(false);\n  const [serverErr, setServerErr] = useState<string>(\"\");\n  const [showEditForm, setShowEditForm] = useState<boolean>(false);\n  const [showDelConf, setShowDelConf] = useState<boolean>(false);\n  const _token = localStorage.getItem(\"token\");\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  useEffect(function handleGetPost() {\n    // retrieve the post from the API.\n    async function getPost() {\n      try {\n        const postRes = await fetch(`${BASE_URL}/posts/${postId}`);\n        const postData = await postRes.json();\n        setPost(postData.post);\n        setIsAuthor(postData.post.author_id === currUser.id);\n      } catch (err) {\n        setServerErr(\"This post either has been deleted or does not exist.\");\n      }\n    }\n\n    // retrieve the comments to the current post from API.\n    async function getComments() {\n      const commentsRes = await fetch(`${BASE_URL}/comments/${postId}`);\n      const commentsData = await commentsRes.json();\n      const commentsSortedByCreateDate = commentsData.comments.sort((a: Comment, b: Comment) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n      setComments(commentsSortedByCreateDate);\n    }\n\n    // search for the post in the current redux store's `posts` state\n    let foundPost = posts.filter((p: Post) => {\n      return p.id === parseInt(postId);\n    })[0];\n\n    if (!foundPost) {\n      // if the post is not in the current redux store's `posts` state, call getPost()\n      getPost();\n    } else {\n      setIsAuthor(foundPost.author_id === currUser.id);\n      setPost(foundPost);\n    }\n    // retrieve comments for the post.\n    getComments();\n  }, [postId]);\n\n  const updatePost = async (data: Post) => {\n    setServerErr(\"\");\n    // requires user login to update a post\n    if (post && _token) {\n      const res = await fetch(`${BASE_URL}/posts/${post.id}`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ ...data, _token }),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n      const resData = await res.json();\n      if (res.status === 200) {\n        // set the updatedPost to the `post` state.\n        let updatedPost = { ...post, ...data, ...resData }\n        setPost(updatedPost);\n        // send dispatch to update the current post in the redux store `posts` state.\n        dispatch(updateCurrentPost(updatedPost));\n      } else {\n        setServerErr(resData.message);\n      }\n    }\n  }\n  \n  const deletePost = async () => {\n    setServerErr(\"\");\n    if (post && _token) {\n      dispatch(deletePostFromAPI(post.id, _token));\n      history.push(\"/\");\n    }\n  }\n  \n  const postComment = async (postId: number, commentId: number | undefined, isReply: boolean, comment: string) => {\n    // requires user login to create a post.\n    if (post && _token) {\n      const newComment = {\n        body: comment,\n        post_id: postId,\n        reply_to_comment_id: commentId,\n        author_id: currUser.id,\n        is_reply: isReply\n      };\n      \n      setServerErr(\"\");\n      \n      try {\n        const res = await fetch(`${BASE_URL}/comments`, {\n          method: \"POST\",\n          body: JSON.stringify(newComment),\n          headers: {\n            \"Content-type\": \"application/json\"\n          }\n        });\n        const commentData = await res.json();\n        if (res.status === 201) {\n          // if the comment made is not a reply,\n          //   add comment to the current `comment` state\n          if (!isReply) {\n            setComments((currComments) => [...currComments,\n              {\n                ...newComment,\n                created_at: commentData.created_at,\n                id: commentData.id,\n                author_name: currUser.display_name,\n                reply_count: \"0\"\n              }]);\n            }\n          } else {\n            setServerErr(commentData.error.message);\n          }\n        } catch (err) {\n          setServerErr(\"Something went wrong with posting a comment\");\n        }\n      }\n    }\n    \n    const handleShowEdit = () => setShowEditForm(true);\n    const handleCloseEdit = () => setShowEditForm(false);\n    const handleCloseDel = () => setShowDelConf(false);\n    const handleShowDel = () => setShowDelConf(true);\n\n    return (\n      <div className=\"PostDetails mt-5\">\n      { showEditForm && <EditFormModal show={showEditForm} handleClose={handleCloseEdit} item={post} editItem={updatePost} />}\n      { showDelConf && <DeleteModal show={showDelConf} handleClose={handleCloseDel} deletePost={deletePost} />}\n      <Container >\n        {serverErr && <Alert variant=\"danger\">{serverErr}</Alert>}\n        {post &&\n          <Fragment>\n            <div className=\"PostDetails-post text-left\">\n              <Row className=\"d-flex justify-content-between\">\n                <Col md={9} className=\"d-flex align-items-center\">\n                  <h2 className=\"PostDetails-title\">{post.title} </h2>\n                  <FavoriteButton post={post} />\n                </Col>\n                {/** Edit/Delete buttons show only if current user is the author of the post */}\n                {isAuthor && <Col md={3} className=\"d-flex align-items-center justify-content-end\">\n                  <Button variant=\"info\" onClick={handleShowEdit}><FontAwesomeIcon icon={faEdit} /> Edit</Button>\n                  <Button variant=\"danger\" className=\"ml-3\" onClick={handleShowDel}><FontAwesomeIcon icon={faTrash} /> Delete</Button>\n                </Col>}\n              </Row>\n              <div className=\"text-muted\">{post.description}</div>\n              <div className=\"text-muted\">\n                Posted by <a href={`/users/${post.author_id}/${changeToURLFriendly(post.author_name)}/favorites`}><span className=\"App-author\">{post.author_name}</span></a> {moment(post.created_at).fromNow()}\n                {post.last_updated_at !== post.created_at && <span className=\"App-update\"> (last updated {moment(post.last_updated_at).fromNow()})</span>}</div>\n              <div className=\"PostDetails-body\">{post.body}</div>\n            </div>\n            <CommentList comments={comments} postId={post.id} postComment={postComment} />\n          </Fragment>\n        }\n      </Container>\n    </div>\n  );\n};\n\nexport default PostDetails;","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/ComposePage/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentReplyAccord/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Routes/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Homepage/index.tsx",["155"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/SearchResults/index.tsx",["156"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/UserProfile/index.tsx",["157"],{"ruleId":"158","severity":1,"message":"159","line":21,"column":6,"nodeType":"160","endLine":21,"endColumn":8,"suggestions":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"162","replacedBy":"166"},{"ruleId":"164","replacedBy":"167"},{"ruleId":"158","severity":1,"message":"168","line":32,"column":6,"nodeType":"160","endLine":32,"endColumn":8,"suggestions":"169"},{"ruleId":"162","replacedBy":"170"},{"ruleId":"164","replacedBy":"171"},{"ruleId":"158","severity":1,"message":"172","line":25,"column":6,"nodeType":"160","endLine":25,"endColumn":8,"suggestions":"173"},{"ruleId":"162","replacedBy":"174"},{"ruleId":"164","replacedBy":"175"},{"ruleId":"162","replacedBy":"176"},{"ruleId":"164","replacedBy":"177"},{"ruleId":"158","severity":1,"message":"178","line":76,"column":6,"nodeType":"160","endLine":76,"endColumn":14,"suggestions":"179"},{"ruleId":"158","severity":1,"message":"159","line":26,"column":6,"nodeType":"160","endLine":26,"endColumn":17,"suggestions":"180"},{"ruleId":"158","severity":1,"message":"181","line":36,"column":6,"nodeType":"160","endLine":36,"endColumn":8,"suggestions":"182"},{"ruleId":"158","severity":1,"message":"183","line":56,"column":6,"nodeType":"160","endLine":56,"endColumn":14,"suggestions":"184"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["185"],"no-native-reassign",["186"],"no-negated-in-lhs",["187"],["186"],["187"],"React Hook useEffect has missing dependencies: 'favorites' and 'post.id'. Either include them or remove the dependency array.",["188"],["186"],["187"],"React Hook useEffect has a missing dependency: 'comment.reply_count'. Either include it or remove the dependency array. If 'setReplyCount' needs the current value of 'comment.reply_count', you can also switch to useReducer instead of useState and read 'comment.reply_count' in the reducer.",["189"],["186"],["187"],["186"],["187"],"React Hook useEffect has missing dependencies: 'currUser.id' and 'posts'. Either include them or remove the dependency array.",["190"],["191"],"React Hook useEffect has missing dependencies: 'dispatch', 'isSearched', and 'searchTerm'. Either include them or remove the dependency array.",["192"],"React Hook useEffect has a missing dependency: 'currUserId'. Either include it or remove the dependency array.",["193"],{"desc":"194","fix":"195"},"no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [dispatch]",{"range":"208","text":"209"},"Update the dependencies array to be: [favorites, post.id]",{"range":"210","text":"211"},"Update the dependencies array to be: [comment.reply_count]",{"range":"212","text":"213"},"Update the dependencies array to be: [currUser.id, postId, posts]",{"range":"214","text":"215"},"Update the dependencies array to be: [dispatch, postsList]",{"range":"216","text":"217"},"Update the dependencies array to be: [dispatch, isSearched, searchTerm]",{"range":"218","text":"219"},"Update the dependencies array to be: [currUserId, userId]",{"range":"220","text":"221"},[705,707],"[dispatch]",[1297,1299],"[favorites, post.id]",[880,882],"[comment.reply_count]",[3253,3261],"[currUser.id, postId, posts]",[1035,1046],"[dispatch, postsList]",[1498,1500],"[dispatch, isSearched, searchTerm]",[2146,2154],"[currUserId, userId]"]